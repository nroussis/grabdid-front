var mainListSelector=".stores__item--paginated",nextBtn=".pagination__next",prevBtn=".pagination__prev",elsOnPage=3,scrollTo="allstores",list=document.querySelectorAll(mainListSelector),currentPage=1;function buttonsCheck(){var t=document.querySelectorAll(".js-inlist");1===currentPage?$(prevBtn).attr("disabled",!0):$(prevBtn).attr("disabled",!1),$("[data-item="+(t.length-1)+"]").hasClass("js-shown")?$(nextBtn).attr("disabled",!0):$(nextBtn).attr("disabled",!1)}function initList(){currentPage=1,$(mainListSelector).each(function(t){$(this).attr("data-item",t),$(this).addClass("js-inlist")});for(var t=0;t<elsOnPage&&void 0!==list[t];t++)list[t].classList.add("js-shown");buttonsCheck()}initList(),$(nextBtn).on("click",function(){$(".js-shown").each(function(t){$("[data-item="+(t+elsOnPage*currentPage)+"]").toggleClass("js-shown"),$(this).toggleClass("js-shown")}),currentPage++,buttonsCheck(),$("html, body").animate({scrollTop:$("#"+scrollTo).offset().top},500)}),$(prevBtn).on("click",function(){$(".js-shown").each(function(t){if(0===t){for(var s=$(this).attr("data-item"),e=s;s-elsOnPage<=e;--e)$("[data-item="+e+"]").toggleClass("js-shown");$(this).toggleClass("js-shown")}$(this).toggleClass("js-shown")}),currentPage--,buttonsCheck(),$("html, body").animate({scrollTop:$("#"+scrollTo).offset().top},500)}),$(".alpha__filter").on("click",function(){var t=$(this).attr("data-l"),s=".liter_"+t;function e(){$(".stores__item").each(function(){$(this).attr("data-item",""),$(this).removeClass("js-shown"),$(this).removeClass("js-inlist")})}if($(".alpha__filter--checked").removeClass("alpha__filter--checked"),$(this).addClass("alpha__filter--checked"),"all"!==t&&"num"!==t)e(),$(s).each(function(t){$(this).attr("data-item",t),$(this).addClass("js-inlist"),t<elsOnPage&&$(this).addClass("js-shown")}),currentPage=1,buttonsCheck();else if("all"===t)e(),initList();else if("num"===t){e();for(var a=[],n=0;n<9;n++)$(".liter_"+n).each(function(){$(this).attr("data-num",n),a.push($(this))});console.log(a),a.sort(function(t,s){t=parseInt(t.attr("data-num")),s=parseInt(s.attr("data-num"))}),console.log(a);for(n=0;n<a.length;n++)a[n].attr("data-item",n),a[n].addClass("js-inlist"),n<elsOnPage&&a[n].addClass("js-shown");currentPage=1,buttonsCheck()}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
